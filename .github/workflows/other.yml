name: Build and test (other)

on:
  push:
  pull_request:
  schedule:
    # run daily, this refreshes the cache
    - cron: "13 2 * * *"

concurrency: # On new push, cancel old workflows from the same PR, branch or tag:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  python-test:
    name: Python tests
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["2.7", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # To check which files changed: origin/master..HEAD
      - uses: LizardByte/setup-python-action@master
        with:
          python-version: ${{matrix.python-version}}

      - uses: actions/cache@v4
        name: Setup cache for running pre-commit fast
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - run: echo "::add-matcher::.github/workflows/python-warning-matcher.json"
        name: "Setup GitHub for reporting Python warnings as annotations in pull request code review"

      - uses: pre-commit/action@v3.0.1
        name: Run pre-commit checks (no spaces at end of lines, etc)
        if: ${{ matrix.python-version != '2.7' }}
        with:
          extra_args: --all-files --verbose --hook-stage commit
        env:
          SKIP: no-commit-to-branch

      - name: Install dependencies only needed for python 2
        if: ${{ matrix.python-version == '2.7' }}
        run: pip install enum

      - name: Install dependencies only needed for python 3
        if: ${{ matrix.python-version != '2.7' }}
        run: pip install opentelemetry-api opentelemetry-exporter-zipkin-json opentelemetry-sdk pandas pytype toml wrapt

      - name: Install common dependencies for Python ${{matrix.python-version}}
        run: pip install future mock pytest-coverage pytest-mock

      - name: Run Pytest for python 2 and get code coverage for Codecov
        if: ${{ matrix.python-version == '2.7' }}
        run: >
          pytest
          --cov=scripts --cov=ocaml/xcp-rrdd
          scripts/ ocaml/xcp-rrdd -vv -rA
          --junitxml=.git/pytest${{matrix.python-version}}.xml
          --cov-report term-missing
          --cov-report xml:.git/coverage${{matrix.python-version}}.xml
        env:
          PYTHONDEVMODE: yes

      - name: Run Pytest for python 3 and get code coverage for Codecov
        if: ${{ matrix.python-version != '2.7' }}
        run: >
          pytest
          --cov=scripts --cov=ocaml/xcp-rrdd --cov=python3/
          scripts/ ocaml/xcp-rrdd python3/ -vv -rA
          --junitxml=.git/pytest${{matrix.python-version}}.xml
          --cov-report term-missing
          --cov-report xml:.git/coverage${{matrix.python-version}}.xml
        env:
          PYTHONDEVMODE: yes

      - name: Upload Python ${{matrix.python-version}} coverage report to Codecov using v4
        uses: codecov/codecov-action@v4
        id: codecov4
        # v4 fixes coverage upload failures by not using tokenless uploads.
        # It needs secrets.CODECOV_TOKEN(from master/repo or org) to be set up.
        # With CODECOV_TOKEN, the coverage upload is not victim to GitHub's API
        # rate limiting and it works for PRs, pushes, forks and builds on master.
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: env.CODECOV_TOKEN
        with:
          directory: .git
          fail_ci_if_error: false
          env_vars: OS,PYTHON
          files: coverage${{matrix.python-version}}.xml
          flags: python${{matrix.python-version}}
          name: coverage${{matrix.python-version}}

      - name: Upload Python ${{matrix.python-version}} coverage report to Codecov using OpenID Connect
        uses: codecov/codecov-action@v4
        id: codecov_openid
        # If the user has OpenID Connect, use it. Does not work on branches(e.g. on master after merges)
        continue-on-error: true  # When OpenID Connect (OIDC) is not available(non-PRs), fall back to v3
        if: steps.codecov4.outcome != 'success'
        with:
          directory: .git
          env_vars: OS,PYTHON
          files: coverage${{matrix.python-version}}.xml
          flags: python${{matrix.python-version}}
          name: coverage${{matrix.python-version}}
          use_oidc: true

      - name: Upload Python ${{matrix.python-version}} coverage report to Codecov using v3
        uses: codecov/codecov-action@v3
        id: codecov3
        # When v4 was not possible, we have no other option but to fall back to v3.
        # The drawback of v3 is that it is victim to GitHub's API rate limiting, which
        # can cause the coverage upload to fail. Only the owner of the repo (or the org)
        # can fix this situation by adding the CODECOV_TOKEN secret to the repo (or org).
        # This requires manual action and trust in the Codecov service to not impersonate
        # the owner of the repo (or the org) beyond API access for coverage uploads:
        # https://docs.codecov.com/docs/adding-the-codecov-token
        if: steps.codecov4.outcome != 'success' && steps.codecov_openid.outcome != 'success'
        with:
          directory: .git
          fail_ci_if_error: false
          env_vars: OS,PYTHON
          files: coverage${{matrix.python-version}}.xml
          flags: python${{matrix.python-version}}
          name: coverage${{matrix.python-version}}
          verbose: true

      - name: Upload coverage report to Coveralls (alternative to Codecov - was used earlier)
        uses: coverallsapp/github-action@v2
        if: ${{ matrix.python-version != '2.7' }}
        continue-on-error: true
        with:
          format: cobertura
          files: .git/coverage${{matrix.python-version}}.xml
          flag-name: python${{matrix.python-version}}

      - uses: dciborow/action-pylint@0.1.0
        if: ${{ matrix.python-version != '2.7' }}
        with:
          reporter: github-pr-review
          level: warning
          # To be customized to cover remaining Python scripts:
          glob_pattern: "**/*.py"
        continue-on-error: true

      - name: Run pytype checks
        if: ${{ matrix.python-version != '2.7' }}
        run: ./pytype_reporter.py
        env:
          PR_NUMBER: ${{ github.event.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYTYPE_REPORTER_DEBUG: True

      - name: pyflakes
        uses: reviewdog/action-pyflakes@v1
        with:
          github_token: ${{ secrets.github_token }}
        continue-on-error: true

  deprecation-test:
    name: Deprecation tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate empty configuration for make to be happy
        run: touch config.mk

      - name: quality-gate
        run: make quality-gate

  test-sdk-builds:
    name: Test SDK builds
    uses: ./.github/workflows/generate-and-build-sdks.yml
    with:
      # Ensure you also update ocaml-tests
      # when changing this value, to keep builds
      # consistent
      xapi_version: "v0.0.0"
