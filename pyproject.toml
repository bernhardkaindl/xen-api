# https://packaging.python.org/en/latest/specifications/pyproject-toml/
[project]
name = "xen-api"
requires-python = ">=3.6.*"
license = {file = "LICENSE"}
keywords = ["xen-project", "Xen", "hypervisor", "libraries"]
maintainers = [
    {name = "Christian Lindig"},
    {name = "Edwin Török"},
    {name = "Rob Hoes"},
    {name = "Pau Ruiz Safont"},
]
readme = "README.markdown"
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: POSIX :: Linux :: XenServer Dom0",
    "Operating System :: POSIX :: Linux :: XCP-ng Dom0",
    "Programming Language :: ML",
    "Programming Language :: Python :: Implementation :: CPython",
]

[project.urls]
homepage = "https://github.com/xapi-project/xen-api"
repository = "https://github.com/xapi-project/xen-api"

[tool.black]
line-length = 88


# -----------------------------------------------------------------------------
# Coverage.py - https://coverage.readthedocs.io/en/coverage-5.5/config.html
#
# [tool.coverage.run] and [tool.coverage.report] configure these commands:
# coverage run && coverage report
#
# These work in conjunction with [tool.pytest.ini_options] to set defaults
# for running pytest (on its own) and for running Coverage.py with pytest:
#
# Examples for Python test development with Coverage.py:
#
# Run the default tests and check coverage:
#   coverage run && coverage report
#
# Run a custom set of tests and check coverage:
#   coverage run -m pytest python3/tests/test_*.py && coverage report
# -----------------------------------------------------------------------------

[tool.coverage.report]
# Here, developers can configure which lines do not need to be covered by tests:
# fail_under:    minimum code coverage percentage
fail_under = 50
# exclude_lines: lines that are not required to be covered
exclude_lines = [
    "pragma: no cover",  # standard pragma for not covering a line or block
    "if TYPE_CHECKING:", # imports for type checking only
    "pass",
    # Other specific lines that do not need to be covered, comment in which file:
    "raise NbdDeviceNotFound",  # python3/libexec/usb_scan.py
]
# precision digits to use when reporting coverage (sub-percent-digits are not reported):
precision = 0
# skip_covered: Skip reporting files with 100% coverage:
skip_covered = true


[tool.coverage.run]
# Default command line for "coverage run": Run pytest in non-verbose mode
command_line = "-m pytest -v -ra"

# Default data file for "coverage run": Store coverage data in .git/.coverage
data_file = ".git/.coverage"
# Default context for "coverage run": Use the name of the test function
dynamic_context = "test_function"
# Default omit patterns for "coverage run": Omit test files and test directories
omit = [
    "python3/bin/__init__.py",
    "python3/packages/__init__.py",
    # omit tests anything in a test directory (focus on the code)
    "python3/tests",
    "scripts/test_*.py",
    # omit anything in a .local directory anywhere
    "*/.local/*",
    # omit everything in /usr
    "/usr/*",
]
relative_files = true


# Default output when writing "coveragle xml" data. This needs to match what
# diff-cover and coverage upload to Codecov expect
[tool.coverage.xml]
output = ".git/coverage3.11.xml"


# Default output directory for writing "coverage html" data.
# Create it outside the source tree to avoid cluttering the source tree
[tool.coverage.html]
directory = ".git/coverage_html"
show_contexts = true


[tool.isort]
line_length = 88
py_version = 36
profile = "black"
combine_as_imports = true
ensure_newline_before_comments = false

# -----------------------------------------------------------------------------
# Mypy static analysis - https://mypy.readthedocs.io/en/stable/config_file.html
# -----------------------------------------------------------------------------

[tool.mypy]
# Note mypy has no config setting for PYTHONPATH, so you need to call it with:
# PYTHONPATH="scripts/examples/python:.:scripts:scripts/plugins:scripts/examples"
files = [
    "python3",
    "scripts/usb_reset.py",
]
pretty = true
error_summary = true
strict_equality = true
show_error_codes = true
show_error_context = true
# Check the contents of untyped functions in all modules by default:
check_untyped_defs = true
scripts_are_modules = true
python_version = "3.11"
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_redundant_casts = true
disallow_any_explicit = false
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
disable_error_code = ["import-untyped"]  # XenAPI is not typed yet


[[tool.mypy.overrides]]
module = ["packages.observer"]
disable_error_code = [
    "arg-type",  # mypy does not know that the Context class is actually a dict
    "override",  # Typing problem in the used library
    "misc",
    "no-any-unimported",
]


# -----------------------------------------------------------------------------
# Pylint - https://pylint.pycqa.org/en/latest/technical_reference/features.html
# -----------------------------------------------------------------------------

[tool.pylint.design]
max-branches = 43                  # perfmon has 43 branches in a function


[tool.pylint.messages_control]
# These are safe to disable, fixing them is best done during a later code cleanup phases
disable = [
    "broad-exception-caught",
    "no-else-break",
    "no-else-return",
    "consider-using-f-string",     # f-strings is the big new feature of Python 3.6,
    "consider-using-with",         # but like with, best done during code cleanup phase
    "duplicate-code",              # likewise. This is a code cleanup task
    "import-error",                # pylint does not do inter-procedural analysis
    "invalid-name",                # doesn't conform to snake_case naming style
    "missing-function-docstring",  # Best done in the code documentation phase
    "missing-module-docstring",    # Likewise, best done in the code documentation phase
    "missing-class-docstring",     # Likewise, best done in the code documentation phase
    "no-member",                   # Existing code breaches this, not part of porting
    "no-else-break",               # else clause following a break statement
    "protected-access",            # Best done during the code cleanup phase
    "super-with-arguments",        # Consider using Python 3 style super(no args) calls
    "too-many-branches",           # Existing code breaches this, not part of porting
    "too-many-arguments",          # Likewise, not part of porting
    "too-many-locals",             # Likewise, not part of porting
    "too-many-statements",         # Likewise, not part of porting
    "unnecessary-pass",            # Cosmetic, best done during the code cleanup phase
    "useless-object-inheritance",  # Useless object inheritance from object, likewise
]


# -----------------------------------------------------------------------------
# Pyright is the static analysis behind the VSCode Python extension / Pylance
# https://microsoft.github.io/pyright/#/configuration
# -----------------------------------------------------------------------------

[tool.pyright]
# include:          directories to include in checking
# strict:           paths for which strict checking works
# typeCheckingMode: set the standard type checking mode
include              = ["python3", "ocaml/xcp-rrdd"]
strict               = ["python3/tests/observer"]
stubPath             = "python3/stubs"
pythonPlatform       = "Linux"
typeCheckingMode     = "standard"
reportMissingImports = false
pythonVersion        = "3.6"
exclude              = [
    "ocaml/xcp-rrdd/scripts/rrdd/rrdd.py",
    "ocaml/xcp-rrdd/scripts/rrdd/rrdd-example.py",
    "python3/packages/observer.py",
]


# -----------------------------------------------------------------------------
# Pytest is the test framework, for discovering and running tests, fixtures etc
# https://pytest.readthedocs.io/en/latest/customize.html, https://docs.pytest.org
# -----------------------------------------------------------------------------

[tool.pytest.ini_options]
# -----------------------------------------------------------------------------
# addopts: Options to add to all pytest calls:
# -v                           show what happens
# -ra                          show short summary after running tests
#
# addopts are added to all pytest calls. We don't add options that would force
# testing specific paths. To be flexible, we use use testpaths instead(see below)
# -----------------------------------------------------------------------------
addopts = "-v -ra"

# -----------------------------------------------------------------------------
# Other pytest config options:
# log_cli:          show logger messages
# log_cli_level:    log level to show
# python_files:     pattern for test files
# python_functions: pattern for test functions
# testpaths:        directories to search for tests(by default, used for CI)
#                   For development, developers can test only specific files:
#                   Example: pytest python3/tests/test_perfmon.py
# minversion:       this config requires pytest>=7 to configure pythonpath
# pythonpath:       path to stub files and typing stubs for tests
# xfail_strict:     require to remove pytext.xfail marker when test is fixed
# required_plugins: require that these plugins are installed before testing
# -----------------------------------------------------------------------------
testpaths = ["python3", "scripts", "ocaml/xcp-rrdd"]
required_plugins = ["pytest-cov", "pytest-mock"]
log_cli_level = "INFO"
log_cli = true
minversion = "7.0"
pythonpath = "python3/stubs:scripts/examples/python" # Allow to import the XenAPI module
python_files = ["test_*.py", "it_*.py"]
python_functions = ["test_", "it_", "when_"]
xfail_strict = true  # is used to fail tests that are marked as xfail but pass(for TDD)


[tool.pytype_reporter]
default_branch = "feature/py3"
discard_messages_matching = [
    "Couldn't import pyi for 'xml.dom.minidom'",
    "No attribute '.*' on RRDContentHandler",
    "No attribute 'group' on None",
    "No Node.TEXT_NODE in module xml.dom.minidom, referenced from 'xml.dom.expatbuilder'"
]
expected_to_fail = [
    # Need 2to3 -w <file> and maybe a few other minor updates:
    "scripts/backup-sr-metadata.py",
    "scripts/restore-sr-metadata.py",
    # Other fixes needed:
    "scripts/examples/python/shell.py",
    "scripts/static-vdis",
    "scripts/plugins/extauth-hook-AD.py",
]

# -----------------------------------------------------------------------------
# pytype: Google's static type analyzer - https://google.github.io/pytype/
# -----------------------------------------------------------------------------

[tool.pytype]
inputs = [
    # Python 3
    "python3/",
    "ocaml/xcp-rrdd",
    # Python2: These will generate warnings that need to be fixed:
    "scripts/static-vdis",
    "scripts/generate-iscsi-iqn",
    "scripts/hatests",
    "scripts/host-display",
    "scripts/mail-alarm",
    "scripts/print-custom-templates",
    "scripts/probe-device-for-file",
    "scripts/xe-reset-networking",
    "scripts/xe-scsi-dev-map",
    "scripts/examples/python",
    "scripts/yum-plugins",
    "scripts/*.py",

    # To be added later,
    # when converted to Python3-compatible syntax:
    # "ocaml/message-switch/python",
    # "ocaml/idl/ocaml_backend/python",
    # "ocaml/xapi-storage/python",
]
disable = [
    # Reduce noise from python2 scripts(import yum, xenfsimage, xcp, urlgrabber)
    "import-error",
]
platform = "linux"
# Allow pytype to find the XenAPI module, the rrdd module and python3 modules:
pythonpath = "scripts/examples/python:.:scripts:scripts/plugins:scripts/examples"
